rcer
import {Component} from 'react';
import ReadingTask from './osa_tasks/ReadingTask';
import QuizTask from './osa_tasks/QuizTask';
import InteractiveTask from './osa_tasks/InteractiveTask';

/**
 * TaskManager
 * Manages the assessment process, task and topic lists and so on.
 */
export default class TaskManager extends Component {
  // singleton instance
  static managerInstance = null
  // fields
  _topics = null
  _tasksMap = null
  _progress = 0

  constructor(props) {
    super(props);
    this.initTaskManager();
  }

  /**
   * Get a singleton instance of this class
   * @returns {TaskManager}
   */
  static getInstance() {
    if (TaskManager.managerInstance == null) {
      TaskManager.managerInstance = new TaskManager();
    }

    return this.managerInstance;
  }

  /**
   * Populates TaskManager with initial data.
   * All data should be stored in database and retreived from here
   */
  initTaskManager = () => {
    // TODO: Read topics, tasks and more from database. Hard coded for testing purposes
    this._topics = [
      "Allgemein",
      "Informatik",
      "Audiovisuelle Medien",
      "Graphische Datenverarbeitung"
    ]
    let generalTasks = [
      new ReadingTask({ title: "ReadingTask 1"}),
      new QuizTask({ title: "QuizTask 1" }),
      new InteractiveTask({ title: "InteractiveTask 1"})
    ]
    let csTasks = [
      new ReadingTask({ title: "ReadingTask Informatik 1"}),
      new QuizTask({ title: "QuizTask Informatik 1" }),
      new InteractiveTask({ title: "InteractiveTask Informatik 1"})
    ]
    let avTasks = [
      new ReadingTask({ title: "ReadingTask AV 1"}),
      new QuizTask({ title: "QuizTask AV 1" }),
      new InteractiveTask({ title: "InteractiveTask AV 1"})
    ]
    let gdTasks = [
      new ReadingTask({ title: "ReadingTask GD 1"}),
      new QuizTask({ title: "QuizTask GD 1" }),
      new InteractiveTask({ title: "InteractiveTask GD 1"})
    ]
    let tasksArray = [
      generalTasks, csTasks, avTasks, gdTasks
    ]

    // generates a map containing all tasks assigned to their topics.
    const map = new Map()
    for (let i = 0; i < tasksArray.length; i++) {
      const element = tasksArray[i]
      //console.log(this._topics[i], element)
      map.set(this._topics[i], element)
    }

    this._tasksMap = map
  };

  retreiveTopicTaskList = topic => {
    /**
     * TODO: TaskList is retreived from persisted data.
     * It should be a list of objects. The objects are either QuizTasks or InteractiveTasks that contain further information
     * e.g. the question and answers, components to render onto screen and so on...
     */
    return topic;
  };

  retreiveTask = (topic, progress) => {
    // retreive one task from the list and return everything needed
    let task = this._tasksMap.get["Allgemein"]
    console.log(this._tasksMap)
    console.log(topic, progress, task)
    return task;
  };
}
